/**
 * Passkey Authentication Client Library (Minified Version)
 * @version 1.0.0
 */
class PasskeyAuthClient { constructor(t) { if (this.baseUrl = t.baseUrl, this.enableCaptcha = t.enableCaptcha || !1, this.tokenStorageKey = t.tokenStorageKey || "auth_token", this.debug = t.debug || !1, this.token = localStorage.getItem(this.tokenStorageKey), "undefined" == typeof SimpleWebAuthnBrowser) throw new Error("SimpleWebAuthnBrowser is not loaded. Please include @simplewebauthn/browser library."); this.startRegistration = SimpleWebAuthnBrowser.startRegistration, this.startAuthentication = SimpleWebAuthnBrowser.startAuthentication } _log(...t) { this.debug && console.log("[PasskeyAuth]", ...t) } async _request(t, e = {}) { try { this._log("Making request to:", t, e); const s = await fetch(t, { headers: { "Content-Type": "application/json", ...e.headers }, ...e }), o = await s.text(); if (this._log("Response status:", s.status), this._log("Response text:", o), !s.ok) { let t; try { t = JSON.parse(o).error || `HTTP ${s.status}` } catch (e) { t = `HTTP ${s.status}: ${o}` } throw new Error(t) } return JSON.parse(o) } catch (t) { throw this._log("Request error:", t), t } } async register(t) { const { username: e, email: s, displayName: o, capToken: r } = t; if (!e) throw new Error("Username is required"); if (this.enableCaptcha && !r) throw new Error("CAPTCHA token is required when CAPTCHA is enabled"); try { this._log("Starting registration for:", e); const t = { username: e, email: s, displayName: o }; this.enableCaptcha && r && (t.capToken = r); const a = await this._request(`${this.baseUrl}/api/auth/register-begin`, { method: "POST", body: JSON.stringify(t) }); this._log("Registration options received:", a); const { tempUserId: n, ...i } = a; this._log("Creating WebAuthn credential..."); const l = await this.startRegistration(i); this._log("Credential created:", l), this._log("Completing registration..."); const c = await this._request(`${this.baseUrl}/api/auth/register-complete`, { method: "POST", body: JSON.stringify({ username: e, tempUserId: n, expectedChallenge: a.challenge, email: s, displayName: o, credential: l }) }); if (!c.success) throw new Error(c.error || "Registration failed"); return this.token = c.token, localStorage.setItem(this.tokenStorageKey, this.token), this._log("Registration successful:", c.user), c } catch (t) { throw this._log("Registration error:", t), t } } async login(t = {}) { const { username: e } = t; try { this._log("Starting login", e ? `for user: ${e}` : "(any user)"); const t = await this._request(`${this.baseUrl}/api/auth/login-begin`, { method: "POST", body: JSON.stringify({ username: e || void 0 }) }); this._log("Login options received:", t), this._log("Getting WebAuthn credential..."); const s = await this.startAuthentication(t); this._log("Credential received:", s), this._log("Completing login..."); const o = await this._request(`${this.baseUrl}/api/auth/login-complete`, { method: "POST", body: JSON.stringify({ credential: s, expectedChallenge: t.challenge }) }); if (!o.success) throw new Error(o.error || "Login failed"); return this.token = o.token, localStorage.setItem(this.tokenStorageKey, this.token), this._log("Login successful:", o.user), o } catch (t) { throw this._log("Login error:", t), t } } async getProfile() { if (!this.token) throw new Error("No authentication token. Please login first."); try { this._log("Getting user profile..."); const t = await this._request(`${this.baseUrl}/api/auth/me`, { method: "GET", headers: { Authorization: `Bearer ${this.token}` } }); return this._log("Profile retrieved:", t), t } catch (t) { throw this._log("Profile error:", t), (t.message.includes("401") || t.message.includes("Unauthorized")) && this.logout(), t } } async logout() { try { this.token && (this._log("Logging out..."), await this._request(`${this.baseUrl}/api/auth/logout`, { method: "POST", headers: { Authorization: `Bearer ${this.token}` } })) } catch (t) { this._log("Logout error (ignoring):", t) } finally { this.token = null, localStorage.removeItem(this.tokenStorageKey), this._log("Logged out successfully") } } isAuthenticated() { return !!this.token } getToken() { return this.token } async ssoLogin(t) { const { ssoToken: e, provider: s } = t; if (!e || !s) throw new Error("SSO token and provider are required"); try { this._log("Starting SSO login with provider:", s); const t = await this._request(`${this.baseUrl}/api/auth/sso`, { method: "POST", body: JSON.stringify({ ssoToken: e, provider: s }) }); if (!t.success) throw new Error(t.error || "SSO login failed"); return this.token = t.token, localStorage.setItem(this.tokenStorageKey, this.token), this._log("SSO login successful:", t.user), t } catch (t) { throw this._log("SSO login error:", t), t } } async checkSSOConfig(t) { if (!t) throw new Error("Provider is required"); try { this._log("Checking SSO config for provider:", t); const e = await this._request(`${this.baseUrl}/api/auth/sso?provider=${encodeURIComponent(t)}`, { method: "GET" }); return this._log("SSO config:", e), e } catch (t) { throw this._log("SSO config error:", t), t } } } "undefined" != typeof module && module.exports ? module.exports = PasskeyAuthClient : "function" == typeof define && define.amd ? define([], function () { return PasskeyAuthClient }) : window.PasskeyAuthClient = PasskeyAuthClient;
