class PasskeyAuthClient{constructor(e){if(this.baseUrl=e.baseUrl,this.enableCaptcha=e.enableCaptcha||!1,this.tokenStorageKey=e.tokenStorageKey||"auth_token",this.debug=e.debug||!1,this.token=localStorage.getItem(this.tokenStorageKey),"undefined"==typeof SimpleWebAuthnBrowser)throw new Error("SimpleWebAuthnBrowser is not loaded. Please include @simplewebauthn/browser library.");this.startRegistration=SimpleWebAuthnBrowser.startRegistration,this.startAuthentication=SimpleWebAuthnBrowser.startAuthentication}_log(...e){this.debug&&console.log("[PasskeyAuth]",...e)}async _request(e,t={}){try{this._log("Making request to:",e,t);const r=await fetch(e,{headers:{"Content-Type":"application/json",...t.headers},...t}),i=await r.text();if(this._log("Response status:",r.status),this._log("Response text:",i),!r.ok){let e;try{e=JSON.parse(i).error||`HTTP ${r.status}`}catch(t){e=`HTTP ${r.status}: ${i}`}throw new Error(e)}return JSON.parse(i)}catch(e){throw this._log("Request error:",e),e}}async _checkCaptchaConfig(){try{this._log("Checking server CAPTCHA configuration...");await this._request(`${this.baseUrl}/api/auth/register-begin`,{method:"POST",body:JSON.stringify({username:"__captcha_check__"})});return!1}catch(e){return!(!e.message||!(e.message.includes("CAPTCHA")||e.message.includes("captcha")||e.message.includes("verification")))}}async register(e){const{username:t,email:r,displayName:i,capToken:o}=e;if(!t)throw new Error("Username is required");if(!this.enableCaptcha&&!o){if(await this._checkCaptchaConfig())throw new Error("Remote registration not supported. CAPTCHA verification is required - please register directly on the server.")}try{this._log("Starting registration for:",t);const e={username:t,email:r,displayName:i};this.enableCaptcha&&o&&(e.capToken=o);const s=await this._request(`${this.baseUrl}/api/auth/register-begin`,{method:"POST",body:JSON.stringify(e)});if(s.error&&s.error.includes("CAPTCHA"))throw new Error("Remote registration not supported. CAPTCHA is required - please register directly on the server.");this._log("Registration options received:",s);const{tempUserId:n,...a}=s;this._log("Creating WebAuthn credential...");const h=await this.startRegistration(a);this._log("Credential created:",h),this._log("Completing registration...");const l=await this._request(`${this.baseUrl}/api/auth/register-complete`,{method:"POST",body:JSON.stringify({username:t,tempUserId:n,expectedChallenge:s.challenge,email:r,displayName:i,credential:h})});if(l.success)return this.token=l.token,localStorage.setItem(this.tokenStorageKey,this.token),this._log("Registration successful:",l.user),l;throw new Error(l.error||"Registration failed")}catch(e){throw this._log("Registration error:",e),e}}async login(e={}){const{username:t}=e;try{this._log("Starting login",t?`for user: ${t}`:"(any user)");const e=await this._request(`${this.baseUrl}/api/auth/login-begin`,{method:"POST",body:JSON.stringify({username:t||void 0})});this._log("Login options received:",e),this._log("Getting WebAuthn credential...");const r=await this.startAuthentication(e);this._log("Credential received:",r),this._log("Completing login...");const i=await this._request(`${this.baseUrl}/api/auth/login-complete`,{method:"POST",body:JSON.stringify({credential:r,expectedChallenge:e.challenge})});if(i.success)return this.token=i.token,localStorage.setItem(this.tokenStorageKey,this.token),this._log("Login successful:",i.user),i;throw new Error(i.error||"Login failed")}catch(e){throw this._log("Login error:",e),e}}async getProfile(){if(this.token=localStorage.getItem(this.tokenStorageKey),!this.token)throw new Error("No authentication token. Please login first.");try{this._log("Getting user profile...");const e=await this._request(`${this.baseUrl}/api/auth/external`,{method:"GET",headers:{Authorization:`Bearer ${this.token}`}});return this._log("Profile retrieved:",e),e}catch(e){throw this._log("Profile error:",e),(e.message.includes("401")||e.message.includes("Unauthorized"))&&this.logout(),e}}async logout(){try{this.token&&(this._log("Logging out..."),await this._request(`${this.baseUrl}/api/auth/logout`,{method:"POST",headers:{Authorization:`Bearer ${this.token}`}}))}catch(e){this._log("Logout error (ignoring):",e)}finally{this.token=null,localStorage.removeItem(this.tokenStorageKey),this._log("Logged out successfully")}}isAuthenticated(){return this.token=localStorage.getItem(this.tokenStorageKey),!!this.token}getToken(){return this.token=localStorage.getItem(this.tokenStorageKey),this.token}async ssoLogin(e){const{ssoToken:t,provider:r}=e;if(!t||!r)throw new Error("SSO token and provider are required");try{this._log("Starting SSO login with provider:",r);const e=await this._request(`${this.baseUrl}/api/auth/sso`,{method:"POST",body:JSON.stringify({ssoToken:t,provider:r})});if(e.success)return this.token=e.token,localStorage.setItem(this.tokenStorageKey,this.token),this._log("SSO login successful:",e.user),e;throw new Error(e.error||"SSO login failed")}catch(e){throw this._log("SSO login error:",e),e}}async checkSSOConfig(e){if(!e)throw new Error("Provider is required");try{this._log("Checking SSO config for provider:",e);const t=await this._request(`${this.baseUrl}/api/auth/sso?provider=${encodeURIComponent(e)}`,{method:"GET"});return this._log("SSO config:",t),t}catch(e){throw this._log("SSO config error:",e),e}}}"undefined"!=typeof module&&module.exports?module.exports=PasskeyAuthClient:"function"==typeof define&&define.amd?define([],function(){return PasskeyAuthClient}):window.PasskeyAuthClient=PasskeyAuthClient;